#!/usr/bin/dev python3
# -*- coding: utf-8 -*-

"""
使用list和tuple
"""

"""
list

Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。
"""
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
b = ['1', '2', '3', '4']
print(a) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
print(b) # ['1', '2', '3', '4']

# 用len()函数可以获得list元素的个数
print(len(a)) # 10
print(len(b)) # 4

# 用索引来访问list中每一个位置的元素，记得索引是从0开始的
print(a[0]) # 1
print(a[8]) # 9

# 当索引超出了范围时，Python会报一个IndexError错误，记得最后一个元素的索引是len(classmates) - 1。

# 如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素,以此类推，可以获取倒数第2个、倒数第3个
print(a[len(a) - 1]) # 0
print(a[-1]) # 0
print(a[-2]) # 9

# list是一个可变的有序表，所以，可以往list中追加元素到末尾
a.append(11)
print(a) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11]

# 也可以把元素插入到指定的位置，比如索引号为1的位置
a.insert(1, 12)
print(a) # [1, 12, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11]

# 要删除list末尾的元素，用pop()方法
a.pop()
print(a) # [1, 12, 2, 3, 4, 5, 6, 7, 8, 9, 0]

# 要删除指定位置的元素，用pop(i)方法，其中i是索引位置
a.pop(1)
print(a) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]

# 要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：
a[0] = 0
print(a) # [0, 2, 3, 4, 5, 6, 7, 8, 9, 0]

# list里面的元素的数据类型也可以不同
c = [1, 2, 3, 'a', 'b', 'c', False, 0.123, None]
print(c) # [1, 2, 3, 'a', 'b', 'c', False, 0.123, None]

# list元素也可以是另一个list
d = [1, c]
print(d) # [1, [1, 2, 3, 'a', 'b', 'c', False, 0.123, None]]
print(len(d)) # 2

# d可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到
print(d[1][6]) # False

# 如果一个list中一个元素也没有，就是一个空的list，它的长度为0
e = []
print(e) # []
print(len(e)) # 0
e = [       ]
print(e) # []
print(len(e)) # 0

"""
tuple

另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改
"""
a = (1, 2, 3, 4, 5)
print(a) # (1, 2, 3, 4, 5)
# () 也就是元组，没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，但不能赋值成另外的元素

# 不可变的tuple有什么意义？
# 因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。



# 要定义一个空的tuple，可以写成()
b = ()
print(b) # ()

"""
tuple的陷阱
"""
# 1、定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来
c = ('1', '2')

# 2、要定义一个只有1个元素的tuple
d = (1)
print(d) # 1
# 定义的不是tuple，因为()既可以表示tuple，又可以表示数学公式中的小括号，产生了歧义，因此Python规定，这种情况下，按小括号进行计算，计算结果自然是1。

# 只有1个元素的tuple定义时必须加一个逗号,，来消除歧义
e = (1,)
print(e) # (1,) Python在显示只有1个元素的tuple时，也会加一个逗号,以免误解成数学计算意义上的括号。

"""
“可变的”tuple
"""
e = (1, 2, [3, 4, 5])
print(e) # (1, 2, [3, 4, 5])
e[2][0] = 33
e[2][1] = 44
e[2][2] = 55
print(e) # (1, 2, [33, 44, 55])
# 表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。
# tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。
#
# 即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！
# 理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。